name: OTA

on:
  schedule:
    - cron: "0 0 1 */3 *" # At midnight on the first day of every 3rd month
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: Get secrets.h
        shell: bash
        env:
          ENV: ${{ secrets.ENV }}
        run: |
          echo $ENV >> include/secrets.h
          echo "$ENV" | base64 --decode > include/secrets.h

      - name: Get certs
        shell: bash
        run: |
          pip install cryptography
          cd extras
          curl -o cacert.pem https://curl.se/ca/cacert.pem
          python gen_crt_bundle.py -i cacert.pem
          mv x509_crt_bundle ../data/cert/x509_crt_bundle.bin

      - name: Build PlatformIO Project
        run: pio run -e GSMS -e GSMV

      - name: Calculate MD5
        id: md5
        run: |
          echo "GSMS_MD5=$(md5sum .pio/build/GSMS/firmware.bin | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "GSMV_MD5=$(md5sum .pio/build/GSMV/firmware.bin | awk '{ print $1 }')" >> $GITHUB_ENV

          GSMS_MD5=$(md5sum .pio/build/GSMS/firmware.bin | awk '{ print $1 }')
          GSMV_MD5=$(md5sum .pio/build/GSMV/firmware.bin | awk '{ print $1 }')
          GSMS_file_size=$(stat -c%s .pio/build/GSMS/firmware.bin)
          GSMV_file_size=$(stat -c%s .pio/build/GSMV/firmware.bin)
          echo "GSMS_MD5=$GSMS_MD5" >> $GITHUB_ENV
          echo "GSMV_MD5=$GSMV_MD5" >> $GITHUB_ENV
          echo "GSMS_file_size=$GSMS_file_size" >> $GITHUB_ENV
          echo "GSMV_file_size=$GSMV_file_size" >> $GITHUB_ENV

      - name: Encrypt firmware
        env:
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          ENCRYPTION_IV: ${{ secrets.ENCRYPTION_IV }}
        run: |
          mkdir -p firmware
          openssl enc -aes-256-cbc -in .pio/build/GSMS/firmware.bin -out ./firmware/GSMS.bin -K $ENCRYPTION_KEY -iv $ENCRYPTION_IV
          openssl enc -aes-256-cbc -in .pio/build/GSMV/firmware.bin -out ./firmware/GSMV.bin -K $ENCRYPTION_KEY -iv $ENCRYPTION_IV

      - name: Sync firmware to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "default"
          SOURCE_DIR: "./firmware"
          AWS_S3_ENDPOINT: ${{ secrets.S3_ENDPOINT_URL }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: ${{ github.run_number }}
          body: |
            GSMS.bin ${{ env.GSMS_MD5 }} ${{ env.GSMS_file_size }}
            GSMV.bin ${{ env.GSMV_MD5 }} ${{ env.GSMV_file_size }}
            synced
          draft: false
          prerelease: false

      - name: Upload Release Asset GSMS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./firmware/GSMS.bin
          asset_name: GSMS.bin
          asset_content_type: application/octet-stream
      - name: Upload Release Asset GSMV
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./firmware/GSMV.bin
          asset_name: GSMV.bin
          asset_content_type: application/octet-stream
